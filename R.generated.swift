//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.id` struct is generated, and contains static references to accessibility identifiers.
  struct id {
    struct insertionPhotoView {
      /// Accessibility identifier `InsertionPhotoView`.
      static let insertionPhotoView: String = "InsertionPhotoView"

      fileprivate init() {}
    }

    struct loadMoreTableViewCell {
      /// Accessibility identifier `LoadMoreTableViewCell`.
      static let loadMoreTableViewCell: String = "LoadMoreTableViewCell"

      fileprivate init() {}
    }

    struct popularPhotoTableViewCell {
      /// Accessibility identifier `PopularPhotoTableViewCell`.
      static let popularPhotoTableViewCell: String = "PopularPhotoTableViewCell"

      fileprivate init() {}
    }

    struct popularPhotoView {
      /// Accessibility identifier `PopularPhotoView`.
      static let popularPhotoView: String = "PopularPhotoView"

      fileprivate init() {}
    }

    struct tableViewCell {
      /// Accessibility identifier `TableViewCell`.
      static let tableViewCell: String = "TableViewCell"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `image-insertion`.
    static let imageInsertion = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-insertion")
    /// Image `like-icon`.
    static let likeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "like-icon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image-insertion", bundle: ..., traitCollection: ...)`
    static func imageInsertion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageInsertion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like-icon", bundle: ..., traitCollection: ...)`
    static func likeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeIcon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `InsertionPhotoView`.
    static let insertionPhotoView = _R.nib._InsertionPhotoView()
    /// Nib `LoadMoreTableViewCell`.
    static let loadMoreTableViewCell = _R.nib._LoadMoreTableViewCell()
    /// Nib `PopularPhotoTableViewCell`.
    static let popularPhotoTableViewCell = _R.nib._PopularPhotoTableViewCell()
    /// Nib `PopularPhotoView`.
    static let popularPhotoView = _R.nib._PopularPhotoView()
    /// Nib `TableViewCell`.
    static let tableViewCell = _R.nib._TableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InsertionPhotoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.insertionPhotoView) instead")
    static func insertionPhotoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.insertionPhotoView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoadMoreTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadMoreTableViewCell) instead")
    static func loadMoreTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadMoreTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PopularPhotoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popularPhotoTableViewCell) instead")
    static func popularPhotoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popularPhotoTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PopularPhotoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popularPhotoView) instead")
    static func popularPhotoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popularPhotoView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tableViewCell) instead")
    static func tableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tableViewCell)
    }
    #endif

    static func insertionPhotoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InsertionPhotoView? {
      return R.nib.insertionPhotoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InsertionPhotoView
    }

    static func loadMoreTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadMoreTableViewCell? {
      return R.nib.loadMoreTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadMoreTableViewCell
    }

    static func popularPhotoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PopularPhotoTableViewCell? {
      return R.nib.popularPhotoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PopularPhotoTableViewCell
    }

    static func popularPhotoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PopularPhotoView? {
      return R.nib.popularPhotoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PopularPhotoView
    }

    static func tableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TableViewCell? {
      return R.nib.tableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `LoadMoreTableViewCell`.
    static let loadMoreTableViewCell: Rswift.ReuseIdentifier<LoadMoreTableViewCell> = Rswift.ReuseIdentifier(identifier: "LoadMoreTableViewCell")
    /// Reuse identifier `PopularPhotoTableViewCell`.
    static let popularPhotoTableViewCell: Rswift.ReuseIdentifier<PopularPhotoTableViewCell> = Rswift.ReuseIdentifier(identifier: "PopularPhotoTableViewCell")
    /// Reuse identifier `TableViewCell`.
    static let tableViewCell: Rswift.ReuseIdentifier<TableViewCell> = Rswift.ReuseIdentifier(identifier: "TableViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _InsertionPhotoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InsertionPhotoView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InsertionPhotoView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InsertionPhotoView
      }

      fileprivate init() {}
    }

    struct _LoadMoreTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LoadMoreTableViewCell

      let bundle = R.hostingBundle
      let identifier = "LoadMoreTableViewCell"
      let name = "LoadMoreTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadMoreTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadMoreTableViewCell
      }

      fileprivate init() {}
    }

    struct _PopularPhotoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PopularPhotoTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PopularPhotoTableViewCell"
      let name = "PopularPhotoTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PopularPhotoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PopularPhotoTableViewCell
      }

      fileprivate init() {}
    }

    struct _PopularPhotoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PopularPhotoView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PopularPhotoView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PopularPhotoView
      }

      fileprivate init() {}
    }

    struct _TableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TableViewCell

      let bundle = R.hostingBundle
      let identifier = "TableViewCell"
      let name = "TableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
